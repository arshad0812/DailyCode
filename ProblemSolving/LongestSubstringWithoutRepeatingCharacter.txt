
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.io.*;


class demo{


   public static void longestpalindromic(String wrd)
   {
       Map<String, Integer> map=new HashMap<String,Integer>();
       int n=wrd.length();
       String substr = "";

       for(int i=0;i<n;i++)
       {
           if(substr.indexOf(wrd.charAt(i))==-1)
           {
               substr+=wrd.charAt(i);
           }
           else
           {
               map.put(substr,substr.length());
              
               substr+= wrd.charAt(i);
           }

       }
       System.out.println("Substrings:");
       for(Map.Entry<String,Integer> i:map.entrySet())
       {
           System.out.println(i.getKey()+i.getValue());
       }

        
       System.out.println("Largest Substring count:"+Collections.max(map.values()));
   }




    public static void main(String[] args)
    {
        longestpalindromic("abcaabcdba");
    }

}

// Substrings:
// a1 
// abc3 
// abcd4

// Largest Substring count:4



//Hashset method


import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;
import java.io.*;


class demo{


   public static void longestpalindromic(String wrd)
   {
      
       Set<String> Hset=new HashSet<String>();

       int n=wrd.length();
       String substr = "";

       for(int i=0;i<n;i++)
       {
           if(substr.indexOf(wrd.charAt(i))==-1)
           {
               substr+=wrd.charAt(i);
           }
           else
           {
               Hset.add(substr);
               substr="";
               substr+= wrd.charAt(i);
           }

       }
       System.out.println(Collections.max(Hset));
        
   }




    public static void main(String[] args)
    {
        longestpalindromic("abcaabcdba");
    }

}

// Substrings:
// a1 
// abc3 
// abcd4

// Largest Substring count:4



